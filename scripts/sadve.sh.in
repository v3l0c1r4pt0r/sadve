#!/bin/sh
# SADVE - extract #define value from CLI

# do not tolerate any error
set -e

PROGNAME="$0"
FORMAT="d"

function show_help {
  cat <<EOF
Usage: $PROGNAME [--dec|--hex|--type=T] -d|-s|-u|-t|-e SYMBOL HEADER | -h
EOF
  if [ "z$1" != "zusage" ]; then
      cat <<EOF
        -d, --define  Print final value of preprocessor macro
        -s, --struct  Print total length of struct
        -u, --union   Print total length of union
        -t, --type    Print total length of type
        -e, --enum    Print total length of enum
            --dec     Print value in decimal form (default)
            --hex     Print value in hexadecimal form
            --type=T  Print value in T form, where T is format string as in
                      printf(3)
        -h, --help    Print this help message and exit
        SYMBOL        Symbol which value is to be examined
        HEADER        Header where symbol is defined
EOF
  fi
  exit 0
}

# parse options
TEMP=$(getopt -o 'f:dsuteh' --long 'dec,hex,format:,define,struct,union,type,enum,help' -n "$0" -- "$@")
if [ $? -ne 0 ]; then
  exit 1
fi

eval set -- "$TEMP"
unset TEMP

while true; do
  case "$1" in
    '-f'|'--format')
      FORMAT="$2"
      shift 2
      continue
      ;;
    '--hex')
      FORMAT="x"
      shift
      continue
      ;;
    '--dec')
      FORMAT="d"
      shift
      continue
      ;;
    '-d'|'--define')
      MODE="define"
      shift
      continue
      ;;
    '-s'|'--struct')
      MODE="sizeof"
      KEYWORD="struct"
      shift
      continue
      ;;
    '-u'|'--union')
      MODE="sizeof"
      KEYWORD="union"
      shift
      continue
      ;;
    '-t'|'--type')
      MODE="sizeof"
      KEYWORD=""
      shift
      continue
      ;;
    '-e'|'--enum')
      MODE="sizeof"
      KEYWORD="enum"
      shift
      continue
      ;;
    '-h'|'--help')
      show_help;
      ;;
    '--')
      shift
      break
      ;;
    *)
      echo 'Internal error!' >&2
      exit 1
      ;;
  esac
done

INCLUDE="$2"
SYMBOL="$1"

# prepare vars to fill template
case $MODE in
  define)
    export OUTPUT_INCLUDE="$INCLUDE"
    export OUTPUT_SYMBOL="$SYMBOL"
    export OUTPUT_COMMAND="$SYMBOL"
    export OUTPUT_TYPE="$FORMAT"
    OUTPUT_MODE="simple"
    ;;
  sizeof)
    export OUTPUT_INCLUDE="$INCLUDE"
    export OUTPUT_SYMBOL="$SYMBOL"
    export OUTPUT_COMMAND="sizeof($KEYWORD $SYMBOL)"
    export OUTPUT_TYPE="$FORMAT"
    OUTPUT_MODE="simple"
    ;;
  *)
    echo 'Internal error!'
    exit 1;
    ;;
esac

# save script location and generate build directory (if not exists)
SCRIPT_DIR="${CMAKE_INSTALL_FULL_DATAROOTDIR}/${PROJECT_NAME}/$OUTPUT_MODE"
BUILD_DIR="$HOME/.cache/sadve/$OUTPUT_MODE"

# out-of-source build
mkdir -p $BUILD_DIR
cd $BUILD_DIR

# build
cmake $SCRIPT_DIR >>$BUILD_DIR/user.log
make >>$BUILD_DIR/user.log

# run program
make run | awk '/BEGIN/{flag=1;next}/END/{flag=0}flag'

# cleanup
cd - &>/dev/null
find $HOME/.cache/sadve -name *simple_${OUTPUT_SYMBOL}* -exec rm -fr {} \; &>/dev/null || true
