#!/bin/sh
# SADVE - extract #define value from CLI

# Copyright (C) 2018 Kamil Lorenc
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.

# do not tolerate any error
set -e

PROGNAME="$0"
FORMAT="d"

function show_help {
  cat <<EOF
Usage: $PROGNAME [--dec|--hex|--format=F] -d|-s|-u|-t|-e SYMBOL HEADER
       $PROGNAME [--dec|--hex|--format=F] -o STRUCT.FIELD HEADER
       $PROGNAME -h
EOF
  if [ "z$1" != "zusage" ]; then
      cat <<EOF
        -d, --define    Print final value of preprocessor macro
        -s, --struct    Print total length of struct
        -u, --union     Print total length of union
        -t, --type      Print total length of type
        -e, --enum      Print total length of enum
        -o, --offset    Print offset of field in structure
        -I DIR          Appends DIR to search path of include files
            --dec       Print value in decimal form (default)
            --hex       Print value in hexadecimal form
            --format=F  Print value in F form, where F is format string as in
                          printf(3)
            --debug     Debug sadve itself
        -h, --help      Print this help message and exit
        SYMBOL          Symbol which value is to be examined
        HEADER          Header where symbol is defined
EOF
  fi
}

# parse options
TEMP=$(getopt \
  -o 'f:dsuteoI:h' \
  --long 'dec,hex,format:,define,struct,union,type,enum,offset,debug,help' \
  -n "$0" -- "$@")
if [ $? -ne 0 ]; then
  exit 1
fi

eval set -- "$TEMP"
unset TEMP

while true; do
  case "$1" in
    '-f'|'--format')
      FORMAT="$2"
      shift 2
      continue
      ;;
    '--hex')
      FORMAT="x"
      shift
      continue
      ;;
    '--dec')
      FORMAT="d"
      shift
      continue
      ;;
    '-d'|'--define')
      MODE="define"
      shift
      continue
      ;;
    '-s'|'--struct')
      IMPL_MODE="sizeof"
      KEYWORD="struct"
      shift
      continue
      ;;
    '-u'|'--union')
      IMPL_MODE="sizeof"
      KEYWORD="union"
      shift
      continue
      ;;
    '-t'|'--type')
      MODE="sizeof"
      KEYWORD=""
      shift
      continue
      ;;
    '-e'|'--enum')
      IMPL_MODE="sizeof"
      KEYWORD="enum"
      shift
      continue
      ;;
    '-o'|'--offset')
      MODE="offsetof"
      shift
      continue
      ;;
    '-I')
      DIR="$2"
      CFLAGS="$CFLAGS -I$DIR"
      shift 2
      continue
      ;;
    '--debug')
      echo "Debugging requested by user"
      set -x
      VERBOSE="1"
      shift
      continue
      ;;
    '-h'|'--help')
      show_help;
      exit 0
      ;;
    '--')
      shift
      break
      ;;
    *)
      echo 'Internal error!' >&2
      exit 1
      ;;
  esac
done

INCLUDE="$2"
SYMBOL="$1"

# in case of implicit mode set by one of struct, enum, union
if [ -z "$MODE" -a -n "$IMPL_MODE" ]; then
  MODE="$IMPL_MODE"
fi

# prepare vars to fill template
case $MODE in
  define)
    export OUTPUT_INCLUDE="$INCLUDE"
    export OUTPUT_SYMBOL="$SYMBOL"
    export OUTPUT_COMMAND="$SYMBOL"
    export OUTPUT_TYPE="$FORMAT"
    OUTPUT_MODE="simple"
    ;;
  sizeof)
    export OUTPUT_INCLUDE="$INCLUDE"
    export OUTPUT_SYMBOL="$SYMBOL"
    export OUTPUT_COMMAND="sizeof($KEYWORD $SYMBOL)"
    export OUTPUT_TYPE="$FORMAT"
    OUTPUT_MODE="simple"
    ;;
  offsetof)
    # split SYMBOL into STRUCT and FIELD
    STRUCT="${dollar}{SYMBOL%.*}"
    FIELD="${dollar}{SYMBOL#*.}"

    export OUTPUT_INCLUDE="$INCLUDE"
    export OUTPUT_SYMBOL="$SYMBOL"
    export OUTPUT_COMMAND="offsetof($KEYWORD $STRUCT, $FIELD)"
    export OUTPUT_TYPE="$FORMAT"
    OUTPUT_MODE="simple"
    ;;
  *)
    echo 'No mode was chosen. Use one of -dsute.'
    show_help "usage";
    exit 1;
    ;;
esac

# save script location and generate build directory (if not exists)
SCRIPT_DIR="${CMAKE_INSTALL_FULL_DATAROOTDIR}/${PROJECT_NAME}/$OUTPUT_MODE"
BUILD_DIR="$HOME/.cache/sadve/$OUTPUT_MODE"

# out-of-source build
mkdir -p $BUILD_DIR
cd $BUILD_DIR

# build
export CFLAGS="$CFLAGS"
cmake $SCRIPT_DIR >>$BUILD_DIR/user.log
make VERBOSE=$VERBOSE >>$BUILD_DIR/user.log

# run program
make run | awk '/BEGIN/{flag=1;next}/END/{flag=0}flag'

# cleanup
cd - &>/dev/null
find $HOME/.cache/sadve -name *simple_${OUTPUT_SYMBOL}* -exec rm -fr {} \; &>/dev/null || true
